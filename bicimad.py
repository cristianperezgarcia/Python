# -*- coding: utf-8 -*-
"""Bicimad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19VrD6PbzyVHjDIg_RsQgtFjLknci5MBm
"""

from pyspark import SparkContext
from pyspark.sql import functions as F
import json
import re
import matplotlib.pyplot as plt

diciembre_2019 = spark.read.json('dbfs:/FileStore/tables/201912_movements-1.json')
enero_2020 = spark.read.json('dbfs:/FileStore/tables/202001_movements-3.json')
diciembre_2020 = spark.read.json('dbfs:/FileStore/tables/202012_movements-1.json')
enero_2021 = spark.read.json('dbfs:/FileStore/tables/202101_movements.json')
navidades19 = diciembre_2019.union(enero_2020)
navidades20 = diciembre_2020.union(enero_2021)

display(navidades19)
display(navidades20)

navidades19.count()

navidades20.count()

count_navidades19 = navidades19.count()
count_navidades20 = navidades20.count()

labels = ['Navidades 2019', 'Navidades 2020']

valores = [count_navidades19, count_navidades20]

# Crear la gráfica de barras
plt.bar(labels, valores, color=['blue', 'orange'])
plt.xlabel('Año')
plt.ylabel('Recuento')
plt.title('Recuento de datos en Navidades 2019 y 2020')

plt.show()

"""## Estudio Rango Edad

"""

# Estudio de la variación del uso de bicicletas según el rango de edad al que se pertenezca

conteo_por_edad_con_totales = navidades19.groupBy('ageRange').count()
conteo_por_edad_con_totales = conteo_por_edad_con_totales.withColumnRenamed('count', 'Conteo_Navidades_2019')
conteo_por_edad_con_totales_1 = navidades20.groupBy('ageRange').count()
conteo_por_edad_con_totales_1 = conteo_por_edad_con_totales_1.withColumnRenamed('count', 'Conteo_Navidades_2020')
rango_edad = conteo_por_edad_con_totales.join(conteo_por_edad_con_totales_1, 'ageRange', how = 'outer')

total_general = conteo_por_edad_con_totales.agg(F.sum('Conteo_Navidades_2019')).collect()[0][0]
total_general_1 = conteo_por_edad_con_totales_1.agg(F.sum('Conteo_Navidades_2020')).collect()[0][0]

rango_edad1 = rango_edad.withColumn(
    'porcentaje_2019',
    F.col('Conteo_Navidades_2019') / total_general * 100
)

rango_edad2 = rango_edad1.withColumn(
    'porcentaje_2020',
    F.col('Conteo_Navidades_2020') / total_general_1 * 100
)

df_con_incremento = rango_edad2.withColumn("incremento_decrecimiento", F.col("porcentaje_2020") - F.col("porcentaje_2019"))

df_con_incremento.show()

# Gráfica donde se representa el estudio de la celda anterior

edades = df_con_incremento.select('ageRange').rdd.flatMap(lambda x: x).collect()
diferencia_porcentaje = df_con_incremento.select('incremento_decrecimiento').rdd.flatMap(lambda x: x).collect()

# Crear la gráfica de barras
plt.figure(figsize=(10, 6))
plt.bar(edades, diferencia_porcentaje, color='skyblue')

# Agregar etiquetas y título
plt.xlabel('Rango de Edad')
plt.ylabel('Diferencia en Porcentaje')
plt.title('Diferencia en Porcentaje entre Navidades 2019 y 2020 por Rango de Edad')
plt.xticks(rotation=45, ha='right')  # Rotar las etiquetas del eje x para mayor legibilidad

# Mostrar la gráfica
plt.tight_layout()
plt.show()

"""## Estudio por tipos de usuarios

"""

#Podemos observar que en las navidades de 2019 tenemos que los valores de la variable user_type son:  1.Usuario anual (poseedor de un pase anual),
#2.Usuario ocasional,3.Trabajador de la empresa.
#Sin embargo, en las navidades de 2020 vemos que tenermos los valores 1,2,3,6,7. Siendo:  6: Usuario Ocasional (no Abonado)  7: Usuario de BiciMAD GO.

navidades19.groupBy('user_type').count().show()
navidades20.groupBy('user_type').count().show()

# Realizamos el mismo estudio que antes pero esta vez estudiando la variación del uso de bicicletas según el user_type

conteo_por_tipo_de_usuario_con_totales = navidades19.groupBy('user_type').count()
conteo_por_tipo_de_usuario_con_totales = conteo_por_tipo_de_usuario_con_totales.withColumnRenamed('count', 'Conteo_Navidades_2019')
conteo_por_tipo_de_usuario_con_totales_1 = navidades20.groupBy('user_type').count()
conteo_por_tipo_de_usuario_con_totales_1 = conteo_por_tipo_de_usuario_con_totales_1.withColumnRenamed('count', 'Conteo_Navidades_2020')
rango_tipo_de_usuario = conteo_por_tipo_de_usuario_con_totales.join(conteo_por_tipo_de_usuario_con_totales_1, 'user_type', how = 'outer')

total_general_u = conteo_por_tipo_de_usuario_con_totales.agg(F.sum('Conteo_Navidades_2019')).collect()[0][0]
total_general_u_1 = conteo_por_tipo_de_usuario_con_totales_1.agg(F.sum('Conteo_Navidades_2020')).collect()[0][0]

rango_usuario1 = rango_tipo_de_usuario.withColumn(
    'porcentaje_2019',
    F.col('Conteo_Navidades_2019') / total_general_u * 100
)
rango_usuario1 = rango_usuario1.fillna(0)

rango_usuario2 = rango_usuario1.withColumn(
    'porcentaje_2020',
    F.col('Conteo_Navidades_2020') / total_general_u_1 * 100
)
df_con_incremento2 = rango_usuario2.withColumn("incremento_decrecimiento", F.col("porcentaje_2020") - F.col("porcentaje_2019"))
df_con_incremento2.show()
#Vemos que ha bajado el número de personas de cada  tipo de usuario, esto podría deberse al impacto que tuvo el covid, ya que en diciembre  de 2020 hubo un repunte de  casos en España.

# Representación gráfica del estudio anterior
tipo_usuario = df_con_incremento2.select('user_type').rdd.flatMap(lambda x: x).collect()
diferencia_porcentaje2 = df_con_incremento2.select('incremento_decrecimiento').rdd.flatMap(lambda x: x).collect()
# Crear la gráfica de barras
plt.figure(figsize=(10, 6))
plt.bar(tipo_usuario, diferencia_porcentaje2, color='skyblue')

# Agregar etiquetas y título
plt.xlabel('Tipo de usuario')
plt.ylabel('Diferencia en Porcentaje')
plt.title('Diferencia en Porcentaje entre Navidades 2019 y 2020 por tipo de usuario según user_type')
plt.xticks(rotation=45, ha='right')

# Mostrar la gráfica
plt.tight_layout()
plt.show()

"""## Estudio de estaciones mas y menos usadas donde se desenganchan las bicicletas

"""

# Estudio de las estaciones más frecuentadas donde se desengancha una bici

conteo_estaciones_totales = navidades19.groupBy('idunplug_station').count()
conteo_estaciones_totales = conteo_estaciones_totales.withColumnRenamed('count', 'Conteo_Estaciones_Navidades_2019')
conteo_estaciones_totales_1 = navidades20.groupBy('idunplug_station').count()
conteo_estaciones_totales_1 = conteo_estaciones_totales_1.withColumnRenamed('count', 'Conteo_Estaciones_Navidades_2020')
estaciones = conteo_estaciones_totales.join(conteo_estaciones_totales_1, 'idunplug_station', how = 'outer').orderBy(F.desc(F.col('Conteo_Estaciones_Navidades_2019')))

total_general = conteo_estaciones_totales.agg(F.sum('Conteo_Estaciones_Navidades_2019')).collect()[0][0]
total_general_1 = conteo_estaciones_totales_1.agg(F.sum('Conteo_Estaciones_Navidades_2020')).collect()[0][0]

estaciones1 = estaciones.withColumn(
    'porcentaje_2019',
    F.col('Conteo_Estaciones_Navidades_2019') / total_general * 100
)

estaciones2 = estaciones1.withColumn(
    'porcentaje_2020',
    F.col('Conteo_Estaciones_Navidades_2020') / total_general_1 * 100
)

df_con_incremento = estaciones2.withColumn("incremento_decrecimiento", F.col("porcentaje_2020") - F.col("porcentaje_2019"))

df_con_incremento.show()

# Seleccionar las 5 estaciones más frecuentadas
top_5_estaciones = df_con_incremento.select('idunplug_station').collect()
top_5_estaciones = [row[0] for row in top_5_estaciones]

# Seleccionar las diferencias de porcentaje correspondientes a las 5 estaciones
diferencia_porcentaje3 = df_con_incremento.select('incremento_decrecimiento').collect()
diferencia_porcentaje3 = [row[0] for row in diferencia_porcentaje3]

# Crear la gráfica de barras
plt.figure(figsize=(10, 6))
plt.bar(range(len(top_5_estaciones)), diferencia_porcentaje3, color='skyblue')

# Establecer las etiquetas del eje x como las estaciones más frecuentadas
plt.xticks(range(len(top_5_estaciones)), top_5_estaciones, rotation=45, ha='right')

# Agregar etiquetas y título
plt.xlabel('Estaciones más frecuentadas')
plt.ylabel('Diferencia en Porcentaje')
plt.title('Diferencia en Porcentaje entre Navidades 2019 y 2020 para las 5 estaciones más frecuentadas')

# Mostrar la gráfica
plt.tight_layout()
plt.show()

# Estudio de las estaciones menos frecuentadas donde se desengancha una bici

conteo_estaciones_totales = navidades19.groupBy('idunplug_station').count()
conteo_estaciones_totales = conteo_estaciones_totales.withColumnRenamed('count', 'Conteo_Estaciones_Navidades_2019')
conteo_estaciones_totales_1 = navidades20.groupBy('idunplug_station').count()
conteo_estaciones_totales_1 = conteo_estaciones_totales_1.withColumnRenamed('count', 'Conteo_Estaciones_Navidades_2020')
estaciones = conteo_estaciones_totales.join(conteo_estaciones_totales_1, 'idunplug_station', how = 'outer').orderBy(F.asc(F.col('Conteo_Estaciones_Navidades_2019')))

total_general = conteo_estaciones_totales.agg(F.sum('Conteo_Estaciones_Navidades_2019')).collect()[0][0]
total_general_1 = conteo_estaciones_totales_1.agg(F.sum('Conteo_Estaciones_Navidades_2020')).collect()[0][0]

estaciones1 = estaciones.withColumn(
    'porcentaje_2019',
    F.col('Conteo_Estaciones_Navidades_2019') / total_general * 100
)

estaciones2 = estaciones1.withColumn(
    'porcentaje_2020',
    F.col('Conteo_Estaciones_Navidades_2020') / total_general_1 * 100
)

df_con_decrecimiento = estaciones2.withColumn("incremento_decrecimiento", F.col("porcentaje_2020") - F.col("porcentaje_2019"))
df_con_decrecimiento = df_con_decrecimiento.filter(F.col('Conteo_Estaciones_Navidades_2019').isNotNull())

df_con_decrecimiento.show()

# Seleccionar las 5 estaciones menos frecuentadas
bottom_5_estaciones = df_con_decrecimiento.orderBy('Conteo_Estaciones_Navidades_2019').limit(5).select('idunplug_station').collect()
bottom_5_estaciones = [row[0] for row in bottom_5_estaciones]

# Seleccionar las diferencias de porcentaje correspondientes a las 5 estaciones menos frecuentadas
diferencia_porcentaje4 = df_con_decrecimiento.orderBy('Conteo_Estaciones_Navidades_2019').limit(5).select('incremento_decrecimiento').collect()
diferencia_porcentaje4 = [row[0] for row in diferencia_porcentaje4]

# Crear la gráfica de barras
plt.figure(figsize=(10, 6))
plt.bar(range(len(bottom_5_estaciones)), diferencia_porcentaje4, color='skyblue')

# Establecer las etiquetas del eje x como las estaciones menos frecuentadas
plt.xticks(range(len(bottom_5_estaciones)), bottom_5_estaciones, rotation=45, ha='right')

# Agregar etiquetas y título
plt.xlabel('Estaciones menos frecuentadas')
plt.ylabel('Diferencia en Porcentaje')
plt.title('Diferencia en Porcentaje entre Navidades 2019 y 2020 para las 5 estaciones menos frecuentadas')

# Mostrar la gráfica
plt.tight_layout()
plt.show()

"""## Estudio de estaciones mas y menos usadas donde se enganchan las bicicletas"""

# Estudio de las estaciones más frecuentadas donde se engancha una bici
conteo_estaciones_totales = navidades19.groupBy('idplug_station').count()
conteo_estaciones_totales = conteo_estaciones_totales.withColumnRenamed('count', 'Conteo_Estaciones_Navidades_2019')
conteo_estaciones_totales_1 = navidades20.groupBy('idplug_station').count()
conteo_estaciones_totales_1 = conteo_estaciones_totales_1.withColumnRenamed('count', 'Conteo_Estaciones_Navidades_2020')
estaciones = conteo_estaciones_totales.join(conteo_estaciones_totales_1, 'idplug_station', how = 'outer').orderBy(F.desc(F.col('Conteo_Estaciones_Navidades_2019')))

total_general = conteo_estaciones_totales.agg(F.sum('Conteo_Estaciones_Navidades_2019')).collect()[0][0]
total_general_1 = conteo_estaciones_totales_1.agg(F.sum('Conteo_Estaciones_Navidades_2020')).collect()[0][0]

estaciones1 = estaciones.withColumn(
    'porcentaje_2019',
    F.col('Conteo_Estaciones_Navidades_2019') / total_general * 100
)

estaciones2 = estaciones1.withColumn(
    'porcentaje_2020',
    F.col('Conteo_Estaciones_Navidades_2020') / total_general_1 * 100
)

df_con_incremento = estaciones2.withColumn("incremento_decrecimiento", F.col("porcentaje_2020") - F.col("porcentaje_2019"))

df_con_incremento.show()

# Estudio de las estaciones menos frecuentadas donde se engancha una bici
conteo_estaciones_totales = navidades19.groupBy('idplug_station').count()
conteo_estaciones_totales = conteo_estaciones_totales.withColumnRenamed('count', 'Conteo_Estaciones_Navidades_2019')
conteo_estaciones_totales_1 = navidades20.groupBy('idplug_station').count()
conteo_estaciones_totales_1 = conteo_estaciones_totales_1.withColumnRenamed('count', 'Conteo_Estaciones_Navidades_2020')
estaciones = conteo_estaciones_totales.join(conteo_estaciones_totales_1, 'idplug_station', how = 'outer').orderBy(F.asc(F.col('Conteo_Estaciones_Navidades_2019')))

total_general = conteo_estaciones_totales.agg(F.sum('Conteo_Estaciones_Navidades_2019')).collect()[0][0]
total_general_1 = conteo_estaciones_totales_1.agg(F.sum('Conteo_Estaciones_Navidades_2020')).collect()[0][0]

estaciones1 = estaciones.withColumn(
    'porcentaje_2019',
    F.col('Conteo_Estaciones_Navidades_2019') / total_general * 100
)

estaciones2 = estaciones1.withColumn(
    'porcentaje_2020',
    F.col('Conteo_Estaciones_Navidades_2020') / total_general_1 * 100
)

df_con_decrecimiento = estaciones2.withColumn("incremento_decrecimiento", F.col("porcentaje_2020") - F.col("porcentaje_2019"))
df_con_decrecimiento = df_con_decrecimiento.filter(F.col('Conteo_Estaciones_Navidades_2019').isNotNull())

df_con_decrecimiento.show()

"""## Comienzo de analisis con Apache Spark debido al coste computacional

"""

# Convertimos ambos dataframes a rdd
rdd_navidades19 = sc.parallelize(navidades19.collect())
rdd_navidades20 = sc.parallelize(navidades20.collect())

# Estaciones de desenganche de bicis más frecuentadas y su media de tiempo en navidades de 2019 y 2020

top_5_stations_19 = (rdd_navidades19
                     .map(lambda x: (x['idunplug_station'], (x['travel_time'], 1)))  # Mapear a (estación, (tiempo_viaje, 1))
                     .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))           # Sumar tiempos y contar ocurrencias por estación
                     .mapValues(lambda x: (x[0] / x[1], x[1]))                       # Calcular la media de travel_time y mantener el conteo por estación
                     .sortBy(lambda x: x[1][1], ascending=False)                     # Ordenar por el conteo de ocurrencias en orden descendente
                     .take(5))                                                       # Tomar las 5 primeras estaciones para 2019

# Obtener tabla con las 5 estaciones más frecuentadas, su conteo y media de travel_time para navidades de 2020
top_5_stations_20 = (rdd_navidades20
                     .map(lambda x: (x['idunplug_station'], (x['travel_time'], 1)))  # Mapear a (estación, (tiempo_viaje, 1))
                     .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))           # Sumar tiempos y contar ocurrencias por estación
                     .mapValues(lambda x: (x[0] / x[1], x[1]))                       # Calcular la media de travel_time y mantener el conteo por estación
                     .sortBy(lambda x: x[1][1], ascending=False)                     # Ordenar por el conteo de ocurrencias en orden descendente
                     .take(5))                                                       # Tomar las 5 primeras estaciones para 2020

# Mostrar el resultado para 2019
print("Top 5 estaciones más frecuentadas, su conteo y media de travel_time para Navidades 2019:")
for station, (avg_travel_time_19, count_19) in top_5_stations_19:
    print(f"Estación {station}: Conteo = {count_19}, Media de travel_time = {avg_travel_time_19}")

# Mostrar el resultado para 2020
print("\nTop 5 estaciones más frecuentadas, su conteo y media de travel_time para Navidades 2020:")
for station, (avg_travel_time_20, count_20) in top_5_stations_20:
    print(f"Estación {station}: Conteo = {count_20}, Media de travel_time = {avg_travel_time_20}")

# Estaciones de desenganche de bicis menos frecuentadas y su media de tiempo en navidades de 2019 y 2020

top_5_stations_menos_frecuentadas_19 = (rdd_navidades19
                     .map(lambda x: (x['idunplug_station'], (x['travel_time'], 1)))  # Mapear a (estación, (tiempo_viaje, 1))
                     .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))           # Sumar tiempos y contar ocurrencias por estación
                     .mapValues(lambda x: (x[0] / x[1], x[1]))                       # Calcular la media de travel_time y mantener el conteo por estación
                     .sortBy(lambda x: x[1][1], ascending=True)                     # Ordenar por el conteo de ocurrencias en orden descendente
                     .take(5))                                                       # Tomar las 5 primeras estaciones para 2019

# Obtener tabla con las 5 estaciones más frecuentadas, su conteo y media de travel_time para navidades de 2020
top_5_stations_menos_frecuentadas_20 = (rdd_navidades20
                     .map(lambda x: (x['idunplug_station'], (x['travel_time'], 1)))  # Mapear a (estación, (tiempo_viaje, 1))
                     .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))           # Sumar tiempos y contar ocurrencias por estación
                     .mapValues(lambda x: (x[0] / x[1], x[1]))                       # Calcular la media de travel_time y mantener el conteo por estación
                     .sortBy(lambda x: x[1][1], ascending=True)                     # Ordenar por el conteo de ocurrencias en orden descendente
                     .take(5))                                                       # Tomar las 5 primeras estaciones para 2020

# Mostrar el resultado para 2019
print("Top 5 estaciones menos frecuentadas, su conteo y media de travel_time para Navidades 2019:")
for station, (avg_travel_time_19, count_19) in top_5_stations_menos_frecuentadas_19:
    print(f"Estación {station}: Conteo = {count_19}, Media de travel_time = {avg_travel_time_19}")

# Mostrar el resultado para 2020
print("\nTop 5 estaciones menos frecuentadas, su conteo y media de travel_time para Navidades 2020:")
for station, (avg_travel_time_20, count_20) in top_5_stations_menos_frecuentadas_20:
    print(f"Estación {station}: Conteo = {count_20}, Media de travel_time = {avg_travel_time_20}")

estaciones_2019 = set([station for station, _ in top_5_stations_19])
estaciones_2020 = set([station for station, _ in top_5_stations_20])

estaciones_comunes = estaciones_2019.intersection(estaciones_2020)

print("Estaciones comunes más frecuentadas en Navidades de 2019 y 2020:")
for station in estaciones_comunes:
    print(f"Estación {station}")

# Filtrar las estaciones comunes y obtener sus conteos para 2019
top_5_stations_19_comunes = [(station, avg_travel_time_19, count_19) for station, (avg_travel_time_19, count_19) in top_5_stations_19 if station in estaciones_comunes]

# Filtrar las estaciones comunes y obtener sus conteos para 2020
top_5_stations_20_comunes = [(station, avg_travel_time_20, count_20) for station, (avg_travel_time_20, count_20) in top_5_stations_20 if station in estaciones_comunes]

# Convertir las estaciones a cadenas
estaciones_comunes_str = [str(estacion) for estacion in estaciones_comunes]

# Obtener los conteos de Navidad 2019 y Navidad 2020 de las estaciones comunes
conteos_19_comunes = [count_19 for _, _, count_19 in top_5_stations_19_comunes]
conteos_20_comunes = [count_20 for _, _, count_20 in top_5_stations_20_comunes]

# Crear gráfico de barras para las estaciones comunes
plt.figure(figsize=(10, 6))
plt.bar(estaciones_comunes_str, conteos_19_comunes, color='skyblue', label='Navidad 2019')
plt.bar(estaciones_comunes_str, conteos_20_comunes, color='salmon', alpha=0.7, label='Navidad 2020')
plt.title('Estaciones más frecuentadas comunes entre Navidades 2019 y 2020')
plt.xlabel('Estación')
plt.ylabel('Conteo')
plt.xticks(rotation=45)
plt.legend()

plt.tight_layout()
plt.show()

# Calcular la media del tiempo total de todos los viajes para Navidades 2019
avg_total_time_19 = (rdd_navidades19
                     .map(lambda x: x['travel_time'])  # Obtener solo los tiempos de viaje
                     .mean())                         # Calcular la media

# Calcular la media del tiempo total de todos los viajes para Navidades 2020
avg_total_time_20 = (rdd_navidades20
                     .map(lambda x: x['travel_time'])  # Obtener solo los tiempos de viaje
                     .mean())                         # Calcular la media

# Mostrar el resultado para 2019
print("\nMedia del tiempo total de todos los viajes para Navidades 2019:")
print(f"Media del tiempo total = {avg_total_time_19}")

# Mostrar el resultado para 2020
print("\nMedia del tiempo total de todos los viajes para Navidades 2020:")
print(f"Media del tiempo total = {avg_total_time_20}")

# Obtener las 5 estaciones con mayor tiempo de uso
top_5_stations_time19 = (rdd_navidades19
                  .map(lambda x: (x['idunplug_station'], (x['travel_time'], 1)))  # Mapear a (estación, (travel_time, 1))
                  .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))             # Sumar tiempos y contar ocurrencias por estación
                  .mapValues(lambda x: x[0] / x[1])                               # Sumar el tiempo de uso por estación
                  .sortBy(lambda x: x[1], ascending=False)                   # Ordenar por travel_time en orden descendente
                  .take(5))                                                   # Tomar las 5 primeras estaciones

top_5_stations_time20 = (rdd_navidades20
                  .map(lambda x: (x['idunplug_station'], (x['travel_time'], 1)))  # Mapear a (estación, (travel_time, 1))
                  .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))             # Sumar tiempos y contar ocurrencias por estación
                  .mapValues(lambda x: x[0] / x[1])                               # Sumar el tiempo de uso por estación
                  .sortBy(lambda x: x[1], ascending=False)                   # Ordenar por travel_time en orden descendente
                  .take(5))

# Mostrar los resultados
print("Las 5 estaciones con mayor tiempo de uso en 2019 son:")
for station, total_time in top_5_stations_time19:
    print("Estación:", station, "- Tiempo de uso total:", total_time)
print("Las 5 estaciones con mayor tiempo de uso en 2020 son:")
for station, total_time in top_5_stations_time20:
    print("Estación:", station, "- Tiempo de uso total:", total_time)

# Obtener las 5 estaciones con menor tiempo de uso
top_5_stations_time19_less = (rdd_navidades19
                  .map(lambda x: (x['idunplug_station'], (x['travel_time'], 1)))  # Mapear a (estación, (travel_time, 1))
                  .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))             # Sumar tiempos y contar ocurrencias por estación
                  .mapValues(lambda x: x[0] / x[1])                               # Sumar el tiempo de uso por estación
                  .sortBy(lambda x: x[1], ascending=True)                   # Ordenar por travel_time en orden descendente
                  .take(5))                                                   # Tomar las 5 primeras estaciones

top_5_stations_time20_less = (rdd_navidades20
                  .map(lambda x: (x['idunplug_station'], (x['travel_time'], 1)))  # Mapear a (estación, (travel_time, 1))
                  .reduceByKey(lambda a, b: (a[0] + b[0], a[1] + b[1]))             # Sumar tiempos y contar ocurrencias por estación
                  .mapValues(lambda x: x[0] / x[1])                               # Sumar el tiempo de uso por estación
                  .sortBy(lambda x: x[1], ascending=True)                   # Ordenar por travel_time en orden descendente
                  .take(5))

# Mostrar los resultados
print("Las 5 estaciones con menor tiempo de uso en 2019 son:")
for station, total_time in top_5_stations_time19_less:
    print("Estación:", station, "- Tiempo de uso total:", total_time)
print("Las 5 estaciones con menor tiempo de uso en 2020 son:")
for station, total_time in top_5_stations_time20_less:
    print("Estación:", station, "- Tiempo de uso total:", total_time)

# En este estudio vamos a obtener el porcentaje de tiempo según

# Extraer las estaciones para 2019 y 2020
estaciones_2019 = [station for station, _ in top_5_stations_time19]

# Obtener los tiempos de uso para 2019 de las estaciones más frecuentes
tiempos_2019 = [tiempo for _, tiempo in top_5_stations_time19]

# Obtener los tiempos de uso para 2020 de las estaciones más frecuentes en 2019 del RDD principal
tiempos_2020 = []
for station, _ in top_5_stations_time19:
    tiempo_2020 = rdd_navidades20.filter(lambda x: x['idunplug_station'] == station).map(lambda x: x['travel_time']).mean()
    tiempos_2020.append(tiempo_2020)

# Crear la gráfica de pastel para el tiempo de uso de las 5 estaciones más frecuentes en 2019
plt.figure(figsize=(10, 5))
plt.pie(tiempos_2019, labels=estaciones_2019, autopct='%1.1f%%', startangle=140)
plt.title('Distribución del tiempo de uso de las 5 estaciones más frecuentes en 2019')
plt.axis('equal')  # Para dibujarlo como un círculo

plt.show()

# Crear la gráfica de pastel para el tiempo de uso de las 5 estaciones más frecuentes en 2019 en 2020
plt.figure(figsize=(10, 5))
plt.pie(tiempos_2020, labels=estaciones_2019, autopct='%1.1f%%', startangle=140)
plt.title('Distribución del tiempo de uso de las 5 estaciones más frecuentes en 2019 en 2020')
plt.axis('equal')   # Para dibujarlo como un círculo

plt.show()

"""## Estaciones más frecuentadas según el rango de edad

"""

# Obtener la estación más frecuente para cada tramo de edad en Navidades 2019
estacion_mas_frecuente_19 = rdd_navidades19.map(lambda x: ((x['ageRange'], x['idunplug_station']), 1)) \
    .reduceByKey(lambda a, b: a + b) \
    .map(lambda x: (x[0][0], (x[0][1], x[1]))) \
    .reduceByKey(lambda a, b: a if a[1] > b[1] else b)

# Obtener la estación más frecuente para cada tramo de edad en Navidades 2020
estacion_mas_frecuente_20 = rdd_navidades20.map(lambda x: ((x['ageRange'], x['idunplug_station']), 1)) \
    .reduceByKey(lambda a, b: a + b) \
    .map(lambda x: (x[0][0], (x[0][1], x[1]))) \
    .reduceByKey(lambda a, b: a if a[1] > b[1] else b)

# Mostrar el resultado para Navidades 2019
print("Estación más frecuente para cada tramo de edad en Navidades 2019:")
for age, (station, count) in estacion_mas_frecuente_19.collect():
    print(f"Tramo de edad: {age}, Estación más frecuente: {station}, Conteo: {count}")

# Mostrar el resultado para Navidades 2020
print("\nEstación más frecuente para cada tramo de edad en Navidades 2020:")
for age, (station, count) in estacion_mas_frecuente_20.collect():
    print(f"Tramo de edad: {age}, Estación más frecuente: {station}, Conteo: {count}")

# Obtener datos para la gráfica
edades_19 = estacion_mas_frecuente_19.map(lambda x: x[0]).collect()
estaciones_19 = estacion_mas_frecuente_19.map(lambda x: x[1][0]).collect()
conteos_19 = estacion_mas_frecuente_19.map(lambda x: x[1][1]).collect()

edades_20 = estacion_mas_frecuente_20.map(lambda x: x[0]).collect()
estaciones_20 = estacion_mas_frecuente_20.map(lambda x: x[1][0]).collect()
conteos_20 = estacion_mas_frecuente_20.map(lambda x: x[1][1]).collect()

# Crear la gráfica
plt.figure(figsize=(12, 6))
plt.bar(edades_19, conteos_19, color='skyblue', alpha=0.7, label='Navidades 2019')
plt.bar(edades_20, conteos_20, color='salmon', alpha=0.7, label='Navidades 2020')
plt.xlabel('Tramo de Edad')
plt.ylabel('Conteo')
plt.title('Estación más frecuente para cada tramo de edad en Navidades 2019 y 2020 según el rango de edad')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()